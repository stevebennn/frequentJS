{"version":3,"sources":["frequentJS.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAI,KAAM,YAAW;;AAEjB,QAAI,UAAW,EAAf;AACA,YAAQ,GAAR,GAAc,EAAd;;;AAGA,YAAQ,OAAR,GAAkB,UAAS,GAAT,EAAc;AAC5B,aAAK,GAAL,GAAW,GAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,IAAR,GAAe,UAAS,GAAT,EAAc;AACzB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,KAAT,CAAe,CAAf,EAAiB,GAAjB,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,KAAR,GAAgB,UAAS,GAAT,EAAc;AAC1B,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,KAAT,CAAe,KAAK,GAAL,CAAS,MAAT,GAAgB,GAA/B,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,GAAR,GAAc,UAAS,IAAT,EAAc,IAAd,EAAoB;AAC9B,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,SAAT,CAAoB,OAAK,IAAL,GAAU,CAA9B,EAAkC,OAAK,CAAvC,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,KAAR,GAAgB,YAAW;AACvB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,WAAT,EAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,KAAR,GAAgB,YAAW;AACvB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,WAAT,EAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc;AAC3B,aAAK,GAAL,GAAW,IAAI,OAAJ,CAAY,KAAK,GAAjB,KAAyB,CAAC,CAArC;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,YAAQ,GAAR,GAAc,YAAW;AACrB,eAAO,KAAK,GAAZ;AACH,KAFD;;AAIA,WAAO,OAAP;AAEH,CAtDQ,EAAT;;AAwDA,IAAI,MAAM,CAAC,MAAD,EAAQ,MAAR,EAAgB,iBAAhB,CAAV;AACA,QAAQ,GAAR,CAAY,GAAG,OAAH,CAAW,MAAX,EAAmB,MAAnB,CAA0B,GAA1B,EAA+B,GAA3C","file":"frequentJS-compiled.js","sourcesContent":["// returns the specified number of characters in uppercase starting from either the left,right or middle.\n// String.prototype.upperFrom = function(dir,num,num2) {\n//     switch (dir){\n//         case 'left': return this.left(num).upper() + this.right(this.length-num);\n//             break;\n//         case 'mid' : return this.left(num-1) + this.mid(num,num2).upper() + this.right(this.length-num2-1);\n//             break;\n//         case 'right' : return this.left(this.length-num) + this.right(num).upper();\n//             break;\n//     }\n// };\n\n// // returns the string truncated after character limit is met.\n// String.prototype.truncate = function(num){\n//     return this.length > num ? this.left(num) + \"...\" : this;\n// };\n\n// returns an array using spaces as the delimiter.\n// String.prototype.toArray = function() {\n//     return this.split(\" \");\n// };\n\n// returns the value of a key in a array of object literals.\n// String.prototype.lookup = function(arr) {\n//     let self = this;\n//     return arr.find(function(arr){\n//         return arr[self]\n//     })[self]\n// };\n\n// returns the word specified by index ( does not use a 0 index )\n// String.prototype.word = function(num) { return this.split(\" \")[num-1]; };\n\n\n\nlet fq = (function() {\n\n    let methods =  {};\n    methods.val = \"\";\n\n    // snagging the value we want to manipulate\n    methods.request = function(arg) {\n        this.val = arg;\n        return this;\n    };\n\n    // returns the specified number of characters starting from the left.\n    methods.left = function(num) {\n        this.val = this.val.slice(0,num);\n        return this\n    };\n\n    // returns the specified number of characters starting from the right.\n    methods.right = function(num) {\n        this.val = this.val.slice(this.val.length-num);\n        return this\n    };\n\n    // returns the specified number of characters between the the starting and ending index.\n    methods.mid = function(sNum,eNum) {\n        this.val = this.val.substring((eNum+sNum-1),(sNum-1));\n        return this\n    };\n\n    // returns the string in lowercase.\n    methods.lower = function() {\n        this.val = this.val.toLowerCase();\n        return this\n    };\n\n    // returns the string in uppercase.\n    methods.upper = function() {\n        this.val = this.val.toUpperCase();\n        return this\n    };\n\n    // returns true or false if the string exists in the array passed.\n    methods.exists = function(arr) {\n        this.val = arr.indexOf(this.val) != -1;\n        return this\n    };\n\n    // returns the string value of the val property\n    methods.val = function() {\n        return this.val;\n    };\n\n    return methods;\n\n})();\n\nlet arr = ['this','that', 'the other thing'];\nconsole.log(fq.request('this').exists(arr).val);"]}