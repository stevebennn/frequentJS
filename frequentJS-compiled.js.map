{"version":3,"sources":["frequentJS.js"],"names":[],"mappings":";;AACA,IAAI,KAAK,SAAL,EAAK,GAAW;;AAEhB,SAAK,GAAL,GAAW,EAAX;;;AAGA,SAAK,EAAL,GAAU,UAAS,GAAT,EAAc;AACpB,aAAK,GAAL,GAAW,GAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,IAAL,GAAY,UAAS,GAAT,EAAc;AACtB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,MAAT,CAAgB,CAAhB,EAAkB,GAAlB,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,KAAL,GAAa,UAAS,GAAT,EAAc;AACvB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,KAAT,CAAe,CAAC,GAAhB,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,KAAL,GAAa,YAAW;AACpB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,WAAT,EAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,GAAL,GAAW,UAAS,IAAT,EAAc,IAAd,EAAoB;AAC3B,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,SAAT,CAAoB,OAAK,IAAL,GAAU,CAA9B,EAAkC,OAAK,CAAvC,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,KAAL,GAAa,YAAW;AACpB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,WAAT,EAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,MAAL,GAAc,UAAS,GAAT,EAAc;AACxB,aAAK,GAAL,GAAW,IAAI,OAAJ,CAAY,KAAK,GAAjB,KAAyB,CAAC,CAArC;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,OAAL,GAAe,YAAW;AACtB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,KAAT,CAAe,GAAf,CAAX;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,QAAL,GAAgB,UAAS,GAAT,EAAa;AACzB,aAAK,GAAL,CAAS,MAAT,GAAkB,GAAlB,GAAwB,KAAK,GAAL,GAAW,KAAK,GAAL,CAAS,MAAT,CAAgB,CAAhB,EAAkB,GAAlB,IAAyB,KAA5D,GAAoE,KAAK,GAAL,GAAW,KAAK,GAApF;AACA,eAAO,IAAP;AACH,KAHD;;;AAMA,SAAK,IAAL,GAAY,UAAS,GAAT,EAAc;AACtB,aAAK,GAAL,GAAW,KAAK,GAAL,CAAS,KAAT,CAAe,GAAf,EAAoB,MAAI,CAAxB,CAAX;AACA,eAAO,IAAP;AACH,KAHD;AAKH,CAhED;;AAkEA,OAAO,SAAP,CAAiB,EAAjB,GAAsB,YAAW;AAC7B,WAAO,IAAI,EAAJ,GAAS,EAAT,CAAY,IAAZ,CAAP;AACH,CAFD","file":"frequentJS-compiled.js","sourcesContent":["\nlet fq = function() {\n\n    this.val = \"\";\n\n    // sucking in the value we want to work with\n    this.rq = function(val) {\n        this.val = val;\n        return this;\n    };\n\n    // returns the specified number of characters starting from the left.\n    this.left = function(num) {\n        this.val = this.val.substr(0,num);\n        return this;\n    };\n\n    // returns the specified number of characters starting from the right.\n    this.right = function(num) {\n        this.val = this.val.slice(-num);\n        return this;\n    };\n\n    // returns the string in lowercase.\n    this.lower = function() {\n        this.val = this.val.toLowerCase();\n        return this;\n    };\n\n    // returns the specified number of characters between the the starting and ending index.\n    this.mid = function(sNum,eNum) {\n        this.val = this.val.substring((eNum+sNum-1),(sNum-1));\n        return this;\n    };\n\n    // returns the string in uppercase.\n    this.upper = function() {\n        this.val = this.val.toUpperCase();\n        return this;\n    };\n\n    // returns true or false if the string exists in the array passed.\n    this.exists = function(arr) {\n        this.val = arr.indexOf(this.val) != -1;\n        return this;\n    };\n\n    //returns an array using spaces as the delimiter.\n    this.toArray = function() {\n        this.val = this.val.split(\" \");\n        return this;\n    };\n\n    // returns the string truncated after character limit is met.\n    this.truncate = function(num){\n        this.val.length > num ? this.val = this.val.substr(0,num) + \"...\" : this.val = this.val;\n        return this;\n    };\n\n    //returns the word specified by index ( does not use a 0 index )\n    this.word = function(num) {\n        this.val = this.val.split(\" \")[num-1];\n        return this;\n    };\n\n};\n\nString.prototype.fq = function() {\n    return new fq().rq(this);\n};"]}